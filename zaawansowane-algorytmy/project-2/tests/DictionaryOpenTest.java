import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Dictionary;

import static org.junit.jupiter.api.Assertions.*;

class DictionaryOpenTest {

  @BeforeEach
  void setUp() {}

  @Test
  void testConstructor1() {
    assertDoesNotThrow(() -> new DictionaryOpen<String, Integer>());
  }

  @Test
  void testOneInsertion() {
    DictionaryOpen<String, Integer> dict = new DictionaryOpen<>();
    dict.insert("test", 71);
    assertEquals(71, dict.find("test"));
  }

  @Test
  void testInsertingNoRehash() {
    DictionaryOpen<String, Integer> dict = new DictionaryOpen<>();
    for (int i = 0; i < 64; i++) {
      dict.insert("Key" + i, i);
    }
    assertEquals(64, dict.size());
  }

  @Test
  void testInsertingWithGrow() {
    assertDoesNotThrow(
        () -> {
          DictionaryOpen<String, Integer> dict = new DictionaryOpen<>();
          for (int i = 0; i < 128 * 8; i++) {
            dict.insert("Key" + i, i);
          }
        });
  }

  @Test
  void testDeleteWithNoRehash() {
    DictionaryOpen<String, Integer> dict = new DictionaryOpen<>();
    for (int i = 0; i < 64; i++) {
      dict.insert("testKey" + i, i);
    }
    assertEquals(64, dict.size());
    assertDoesNotThrow(() -> dict.delete("testKey0"));
    assertEquals(63, dict.size());
  }

  @Test
  void testDeleteWithRehash() {
    DictionaryOpen<String, Integer> dict = new DictionaryOpen<>();
    for (int i = 0; i < 8; i++) {
      dict.insert("testKey" + i, i);
    }
    assertEquals(8, dict.size());
    assertDoesNotThrow(() -> dict.delete("testKey0"));
    assertEquals(7, dict.size());
  }
}
